//! This is `atom1`

use std::ops::Deref;
use std::slice;
use std::str;
use serde::{Serialize, Deserialize};

use postcard::{from_bytes, to_allocvec};

//"test" is the name of the wasm module; equivalent to the atom name; in this case it refers to spinner imports
#[link(wasm_import_module = "spinner")]
extern "C" {
    fn print_str(ptr: *const u8, len: usize);
}

// Define a string that is accessible within the wasm
// linear memory.
static HELLO: &'static str = "Hello, World!";

#[no_mangle]
pub extern "C" fn print_to_conterm(index: i32, len: i32) -> i32 {

    let out_str = format!("Printing to Conterm FROM wasm::");

    unsafe {

        //the following function call with compressed parameters should be generated by Hydro
        #[derive(Serialize, Deserialize, Debug, Eq, PartialEq)]
        struct PrintStrArgs {
            string_to_print: String
        }
        let args_vec = to_allocvec(&PrintStrArgs {string_to_print: out_str}).unwrap();

        print_str(args_vec.as_ptr(), args_vec.len());

    }

    return 0;
}

#[no_mangle]
pub extern "C" fn test_spawn(index: i32, len: i32) -> i32 {

    let thread_nos = 7;

    let out_str = format!("{}", thread_nos);

    unsafe {

        //the following function call with compressed parameters should be generated by Hydro
        #[derive(Serialize, Deserialize, Debug, Eq, PartialEq)]
        struct PrintStrArgs {
            string_to_print: String
        }
        let args_vec = to_allocvec(&PrintStrArgs {string_to_print: out_str}).unwrap();

        print_str(args_vec.as_ptr(), args_vec.len());

    }

    return 0;
}
